"""
Typing hints for python-decouple 3.6

Generated with:
stubgen -o mypy_stubs -p decouple

Changes:
* Comment out globals and classes unused by Relay
* Add overrides for AutoConfig.__call__ for different scenarios
* Simplified interfaces of Csv and Choices to our usage
"""

from pathlib import Path
from typing import Any, Callable, Sequence, TypeVar, Union, overload

# PYVERSION: Any
# text_type = str
# read_config: Any
# DEFAULT_ENCODING: str
# TRUE_VALUES: Any
# FALSE_VALUES: Any

def strtobool(value: Union[str, bool]) -> bool: ...

# class UndefinedValueError(Exception): ...
class Undefined: ...

# class Config:
#     repository: Any
#     def __init__(self, repository) -> None: ...
#     def get(self, option, default=..., cast=...): ...
#     def __call__(self, *args, **kwargs): ...

# class RepositoryEmpty:
#     def __init__(self, source: str = ..., encoding=...) -> None: ...
#     def __contains__(self, key): ...
#     def __getitem__(self, key) -> None: ...

# class RepositoryIni(RepositoryEmpty):
#     SECTION: str
#     parser: Any
#     def __init__(self, source, encoding=...) -> None: ...
#     def __contains__(self, key): ...
#     def __getitem__(self, key): ...

# class RepositoryEnv(RepositoryEmpty):
#     data: Any
#     def __init__(self, source, encoding=...) -> None: ...
#     def __contains__(self, key): ...
#     def __getitem__(self, key): ...

# class RepositorySecret(RepositoryEmpty):
#     data: Any
#     def __init__(self, source: str = ...) -> None: ...
#     def __contains__(self, key): ...
#     def __getitem__(self, key): ...

DefaultType = TypeVar("DefaultType")
CastRetType = TypeVar("CastRetType")

class AutoConfig:
    def __init__(self, search_path: Union[str, Path, None] = ...) -> None: ...
    @overload
    def __call__(self, option: str) -> str: ...
    @overload
    def __call__(self, option: str, default: str) -> str: ...
    @overload
    def __call__(
        self, option: str, default: DefaultType
    ) -> Union[str, DefaultType]: ...
    @overload
    def __call__(
        self, option: str, cast: Callable[[Any], CastRetType]
    ) -> CastRetType: ...
    @overload
    def __call__(
        self, option: str, default: Any, cast: Callable[[Any], CastRetType]
    ) -> CastRetType: ...

config: AutoConfig

class Csv:
    # Full signature has several optional params
    # def __init__(
    #     self, cast=..., delimiter: str = ..., strip=..., post_process=...
    # ) -> None: ...
    def __init__(self) -> None: ...
    def __call__(self, value: str) -> list[str]: ...

class Choices:
    # Full signature has choices param
    # def __init__(
    #     self, flat: Any | None = ..., cast=..., choices: Any | None = ...
    # ) -> None: ...
    def __init__(
        self,
        flat: Sequence[CastRetType] = ...,
        cast: Callable[[Any], CastRetType] = ...,
    ) -> None: ...
    def __call__(self, value: Any) -> CastRetType: ...

# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER    - login info for docker hub
# DOCKER_PASS
#
version: 2
jobs:
  build:
    docker:
      - image: docker:stable-git
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: /dockerflow
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - setup_remote_docker

      - run:
          name: Create a version.json
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json

      - run:
          name: Build Docker image
          command: |
            docker build -t fx-private-relay \
            --build-arg CIRCLE_BRANCH="$CIRCLE_BRANCH" \
            --build-arg CIRCLE_TAG="$CIRCLE_TAG" \
            --build-arg CIRCLE_SHA1="$CIRCLE_SHA1" \
            .

      # save the built docker container into CircleCI's cache. This is
      # required since Workflows do not have the same remote docker instance.
      - run:
          name: docker save fx-private-relay
          command: mkdir -p /cache; docker save -o /cache/docker.tar "fx-private-relay"
      - save_cache:
          key: v1-{{ .Branch }}-{{epoch}}
          paths:
            - /cache/docker.tar

  test:
    docker:
      - image: docker:18.02.0-ce
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /cache/docker.tar

      - run:
          name: Test Code
          command: |
            # Create a volume owned by the app user
            docker run \
              --volume /tmp/test-results \
              --name test-results \
              alpine \
              /bin/sh -c \
                "chmod 0777 /tmp/test-results && \
                 chown 10001:10001 /tmp/test-results"
            # Run coverage tests, outputting the results in XML format
            docker run \
              --entrypoint "/bin/bash" \
              --volumes-from test-results \
              fx-private-relay \
              -c \
                'mkdir -p /tmp/test-results/pytest && \
                 mkdir -p /tmp/test-results/coverage && \
                 /app/.local/bin/coverage run --source=. --branch -m pytest \
                   --cov=./ --cov-fail-under=60 \
                   --junitxml=/tmp/test-results/pytest/results.xml && \
                 /app/.local/bin/coverage xml -o /tmp/test-results/coverage/results.xml'
            # Copy results to local disk
            docker cp test-results:/tmp/test-results /tmp

      - store_test_results:
          path: /tmp/test-results

  deploy:
    docker:
      - image: docker:18.02.0-ce
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /cache/docker.tar

      - run:
          name: Deploy to Dockerhub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            # deploy master
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              docker tag fx-private-relay ${DOCKERHUB_REPO}:latest
              docker push ${DOCKERHUB_REPO}:latest
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
            # deploy a release tag...
              echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker tag fx-private-relay "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker images
              docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            fi

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/

      - test:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - deploy:
          requires:
            - build
            - test
          filters:
            tags:
              ignore: /addon-.*/
            branches:
              only: main
